#include "FS.h"
#include "SD.h"
#include "SPI.h"

#define SD_CS    36
#define SD_MOSI  34
#define SD_MISO  19
#define SD_SCLK  5

SPIClass sd_spi(HSPI);

void writeFile(fs::FS &fs, const char * path, const char * message) {
  Serial.printf("Writing to %s\n", path);
  File file = fs.open(path, FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file for writing");
    return;
  }
  if (file.print(message)) {
    Serial.println("File written");
  } else {
    Serial.println("Write failed");
  }
  file.close();
}

void readFile(fs::FS &fs, const char * path) {
  Serial.printf("Reading from %s\n", path);
  File file = fs.open(path);
  if (!file) {
    Serial.println("Failed to open file for reading");
    return;
  }
  while (file.available()) {
    Serial.write(file.read());
  }
  file.close();
}

void setup() {
  Serial.begin(115200);
  sd_spi.begin(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);
  
  if (!SD.begin(SD_CS, sd_spi)) {
    Serial.println("Card Mount Failed");
    return;
  }

  Serial.println("SD card initialized.");
  Serial.printf("Card size: %lluMB\n", SD.cardSize() / (1024 * 1024));

  // Escreve no arquivo
  writeFile(SD, "/log.txt", "Hello from Heltec SD!\n");

  // Lê de volta o conteúdo
  readFile(SD, "/log.txt");
}

void loop() {
  // Nada por enquanto
}
